#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.




def fib(n): 
# defining variable, "fib" as a range of integers/elements
	a, b = 0, 1 
	# defining a & b as the 1st 2 integers in the fibonaci sequence
	while b < n: 
	# at any given iteration, the 2nd integer must be less than "n" which = max
		print b, 
		# gives value of b
		a, b = b, a+b 
		# while this is tru, defining "a" as "b" and "b" as "a+b" - taking 2nd integer and adding to first to create 3rd integer but now only keeping 2nd and 3rd integers to carry into next iteration
		
def fib2(n): 
# defining variable, "fib2" as a range of integers/elements
	result = [] 
	# the result is a list
	a, b = 0, 1 
	# defining a & b as the 1st 2 integers in the fibonaci sequence
	while b < n: 
	# at any given iteration, the 2nd integer must be less than "n" which = max
		result.append(b) 
		#adding the result onto end of "b"
		a, b = b, a+b 
		# while this is tru, defining "a" as "b" and "b" as "a+b" - taking 2nd integer and adding to first to create 3rd integer but now only keeping 2nd and 3rd integers to carry into next iteration
	return result 
	# gives back the list of integers that defines "result"





sum = 0
# setting the total/sum to 0
fibo_new = fib2(4000000)
#creating new list which is using the fib2 list when the range is set to 4000000
for number in fibo_new:
# for any given number in this fibo_new list
	if number %2 == 0:
	# if that number is true
		sum += number
		# take the sum of the number that the iteration is currently on and add to the previous number
print sum
	
